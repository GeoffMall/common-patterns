{
  "configuration" : { },
  "documentation" : {
    "sections" : [ {
      "content" : "## Common Patterns\n\nGithub repo: [github.com/GeoffMall/common-patterns](https://github.com/GeoffMall/common-patterns)\n",
      "filename" : "00-index.md",
      "format" : "Markdown",
      "order" : 1,
      "title" : ""
    }, {
      "content" : "# Database\n\n## Database Types Overview\n\n",
      "filename" : "01-database.md",
      "format" : "Markdown",
      "order" : 2,
      "title" : ""
    }, {
      "content" : "# Cache\n\n[TOC]\n\n[Caches](https://en.wikipedia.org/wiki/Cache_(computing)) store data so that future requests for that data can be served faster.\nIt is typically a smaller, faster storage layer that sits between the application and a larger, slower backing store (e.g., a database or file system).\n\n## Cache-Aside\n\nThe application is responsible for reading and writing data to the cache as needed. \nWhen data is requested, the application first checks the cache. If the data is found (a cache hit), it is returned to the client.\n\n#### Cache Hit\n\nWhen the data is found in the cache, it is returned directly to the client.\n\n```mermaid\nsequenceDiagram\n    Client->>Server: GET /data\n    Server->>Cache: Read data\n    Server->>Client: 200 OK\n```\n\n#### Cache Miss\n\nWhen the data is not found in the cache, it is fetched from the backing store, written to the cache, and then returned to the client.\n\n```mermaid\nsequenceDiagram\n    Client->>Server: GET /data\n    Server->>Cache: Read data\n    Server->>DB: Read data\n    Server->>Cache: Write data\n    Server->>Client: 200 OK\n```\n\n#### Write\n\nWhen data is written, it is written to both the cache and the backing store.\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Server\n    participant Cache\n    participant Database\n    \n    Client->>Server: POST /data\n    par\n        Server->>Database: Write data\n    and\n        Server->>Cache: Write data\n    end\n    Server->>Client: 200 OK\n```\n\n\n## Cache-Through (Read/Write-Through)\n\nInstead of the application managing the cache, a caching layer (e.g., Redis, Memcached) is used to automatically handle reading and writing data to the cache as needed.\n\n#### Cache Hit\n\nWhen the data is found in the cache, it is returned directly to the client.\n\n```mermaid\nsequenceDiagram\n    Client->>Server: GET /data\n    Server->>Cache: Read data\n    Cache->>Server: Return data\n    Server->>Client: 200 OK\n```\n\n#### Cache Miss\n\nWhen the data is not found in the cache, it is fetched from the backing store, written to the cache, and then returned to the client.\n\n```mermaid\nsequenceDiagram\n    participant Cl as Client\n    participant Se as Server\n    participant Ca as Cache\n    participant DB as Database\n    \n    Cl->>Se: GET /data\n    Se->>Ca: Read data\n    Ca->>DB: Read data\n    DB->>Ca: Write data\n    Ca->>Se: Return data\n    Se->>Cl: 200 OK\n```\n\n\n#### Write\n\nData is written to the cache and backing store at the same time. I/O completion is only confirmed once data has been written to both places.\n\n```mermaid\nsequenceDiagram\n    Client->>Server: POST /data\n    Server->>Cache: Write data\n    Cache->>Database: Write data\n    Server->>Client: 200 OK\n```\n\n## Write-Around\n\nData is written directly to the backing store, bypassing the cache. The cache is only updated when data is read.\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Server\n    participant Database\n    \n    Client->>Server: POST /data\n    Server->>Database: Write data\n    Server->>Client: 200 OK    \n```\n\n## Write-Behind\n\nData is written to the cache only. The cache asynchronously writes data to the backing store at a later time.\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Server\n    participant Cache\n    participant Database\n    \n    Client->>Server: POST /data\n    Server->>Cache: Write data\n    Server->>Client: 200 OK\n    Note over Server, Database: Asynchronous write to Database\n    Server-->>Database: Write data\n```\n\n## Eviction\n\nTTL (Time-To-Live) is a common eviction policy where cached data is automatically removed after a certain period of time.\nOther eviction policies include LRU (Least Recently Used), LFU (Least Frequently Used), and FIFO (First In, First Out).\n\n## Examples\n\n#### Redis (In-Memory Data Store)\n\n[Redis](https://redis.io/) is a versatile in-memory data store that serves as both a cache and a database. \nIt supports complex data structures and provides features like data expiration, which makes it a powerful choice for caching. Redis is often used to cache frequently accessed data, such as user sessions, leaderboard rankings, and real-time analytics.\n\n[Memcached](https://memcached.org/) is an in-memory key-value store designed for high-performance caching. It is known for its simplicity and efficiency in storing and retrieving data.\nDevelopers often use Memcached to cache database query results, API responses, and frequently accessed data in web applications.\n\n## Sources\n- [A Hitchhiker's Guide to Caching Patterns by Hazelcast](https://hazelcast.com/blog/a-hitchhikers-guide-to-caching-patterns/)\n- [What is Read-Through vs Write-Through Cache? by Design Gurus](https://www.designgurus.io/answers/detail/what-is-read-through-vs-write-through-cache)\n- [Mastering Caching: Strategies, Benefits and Trade-offs by Level Up Coding](https://levelup.gitconnected.com/mastering-caching-strategies-benefits-and-trade-offs-38c355024bc5)\n",
      "filename" : "02-cache.md",
      "format" : "Markdown",
      "order" : 3,
      "title" : ""
    } ]
  },
  "id" : 0,
  "model" : {
    "properties" : {
      "structurizr.groupSeparator" : "/"
    }
  },
  "name" : "Common Patterns",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlICJDb21tb24gUGF0dGVybnMiICIiIHsKICAgICFkb2NzIHdvcmtzcGFjZS1kb2NzCgogICAgbW9kZWwgewogICAgICAgIHByb3BlcnRpZXMgewogICAgICAgICAgICAic3RydWN0dXJpenIuZ3JvdXBTZXBhcmF0b3IiICIvIgogICAgICAgIH0KCiAgICB9CgogICAgdmlld3MgewogICAgICAgIHByb3BlcnRpZXMgewogICAgICAgICAgICAiYzRwbGFudHVtbC5lbGVtZW50UHJvcGVydGllcyIgInRydWUiCiAgICAgICAgICAgICJjNHBsYW50dW1sLnRhZ3MiICJ0cnVlIgogICAgICAgICAgICAiZ2VuZXJhdHIuc3R5bGUuY29sb3JzLnByaW1hcnkiICIjNDg1ZmM3IgogICAgICAgICAgICAiZ2VuZXJhdHIuc3R5bGUuY29sb3JzLnNlY29uZGFyeSIgIiNmZmZmZmYiCi8vICAgICAgICAgICAgImdlbmVyYXRyLnN0eWxlLmZhdmljb25QYXRoIiAic2l0ZS9mYXZpY29uLmljbyIKLy8gICAgICAgICAgICAiZ2VuZXJhdHIuc3R5bGUubG9nb1BhdGgiICJzaXRlL2xvZ28ucG5nIgoKICAgICAgICAgICAgLy8gQWJzb2x1dGUgVVJMJ3MgbGlrZSAiaHR0cHM6Ly9leGFtcGxlLmNvbS9jdXN0b20uY3NzIiBhcmUgYWxzbyBzdXBwb3J0ZWQKICAgICAgICAgICAgImdlbmVyYXRyLnN0eWxlLmN1c3RvbVN0eWxlc2hlZXQiICJzaXRlL2N1c3RvbS5jc3MiCgogICAgICAgICAgICAiZ2VuZXJhdHIuc3ZnbGluay50YXJnZXQiICJfc2VsZiIKICAgICAgICAgICAgLy8gRnVsbCBsaXN0IG9mIGF2YWlsYWJsZSAiZ2VuZXJhdHIubWFya2Rvd24uZmxleG1hcmsuZXh0ZW5zaW9ucyIKICAgICAgICAgICAgLy8gIkFiYnJldmlhdGlvbixBZG1vbml0aW9uLEFuY2hvckxpbmssQXNpZGUsQXR0cmlidXRlcyxBdXRvbGluayxEZWZpbml0aW9uLEVtb2ppLEVudW1lcmF0ZWRSZWZlcmVuY2UsRm9vdG5vdGVzLEdmbUlzc3VlcyxHZm1TdHJpa2V0aHJvdWdoU3Vic2NyaXB0LEdmbVRhc2tMaXN0LEdmbVVzZXJzLEdpdExhYixJbnMsTWFjcm9zLE1lZGlhVGFncyxSZXNpemFibGVJbWFnZSxTdXBlcnNjcmlwdCxUYWJsZXMsVGFibGVPZkNvbnRlbnRzLFNpbXVsYXRlZFRhYmxlT2ZDb250ZW50cyxUeXBvZ3JhcGhpYyxXaWtpTGlua3MsWFdpa2lNYWNybyxZQU1MRnJvbnRNYXR0ZXIsWW91VHViZUxpbmsiCiAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdnNjaC9mbGV4bWFyay1qYXZhL3dpa2kvRXh0ZW5zaW9ucwogICAgICAgICAgICAvLyBBVFRFTlRJT046CiAgICAgICAgICAgIC8vICogImdlbmVyYXRyLm1hcmtkb3duLmZsZXhtYXJrLmV4dGVuc2lvbnMiIHZhbHVlcyBtdXN0IGJlIHNlcGFyYXRlZCBieSBjb21tYQogICAgICAgICAgICAvLyAqIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSAiR2l0TGFiIiBhbmQgIlJlc2l6YWJsZUltYWdlIiBleHRlbnNpb25zIHRvZ2V0aGVyCiAgICAgICAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3VyLCBpZiBubyBnZW5lcmF0ci5tYXJrZG93bi5mbGV4bWFyay5leHRlbnNpb25zIHByb3BlcnR5IGlzIHNwZWNpZmllZCwgaXMgdG8gbG9hZCB0aGUgVGFibGVzIGV4dGVuc2lvbiBvbmx5CiAgICAgICAgICAgICJnZW5lcmF0ci5tYXJrZG93bi5mbGV4bWFyay5leHRlbnNpb25zIiAiQWJicmV2aWF0aW9uLEFkbW9uaXRpb24sQW5jaG9yTGluayxBdHRyaWJ1dGVzLEF1dG9saW5rLERlZmluaXRpb24sRW1vamksRm9vdG5vdGVzLEdmbVRhc2tMaXN0LEdpdExhYixNZWRpYVRhZ3MsVGFibGVzLFRhYmxlT2ZDb250ZW50cyxUeXBvZ3JhcGhpYyIKCiAgICAgICAgICAgICJnZW5lcmF0ci5zaXRlLmV4cG9ydGVyIiAic3RydWN0dXJpenIiCiAgICAgICAgICAgICJnZW5lcmF0ci5zaXRlLmV4dGVybmFsVGFnIiAiRXh0ZXJuYWwgU3lzdGVtIgogICAgICAgICAgICAiZ2VuZXJhdHIuc2l0ZS5uZXN0R3JvdXBzIiAiZmFsc2UiCiAgICAgICAgICAgICJnZW5lcmF0ci5zaXRlLmNkbiIgImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0iCiAgICAgICAgICAgICJnZW5lcmF0ci5zaXRlLnRoZW1lIiAiYXV0byIKICAgICAgICB9CgoKICAgICAgICBzdHlsZXMgewogICAgICAgICAgICBlbGVtZW50ICJQZXJzb24iIHsKICAgICAgICAgICAgICAgIGNvbG9yICNmZmZmZmYKICAgICAgICAgICAgICAgIHNoYXBlIFBlcnNvbgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9"
  },
  "views" : {
    "configuration" : {
      "branding" : { },
      "properties" : {
        "generatr.site.nestGroups" : "false",
        "generatr.site.externalTag" : "External System",
        "c4plantuml.tags" : "true",
        "generatr.markdown.flexmark.extensions" : "Abbreviation,Admonition,AnchorLink,Attributes,Autolink,Definition,Emoji,Footnotes,GfmTaskList,GitLab,MediaTags,Tables,TableOfContents,Typographic",
        "c4plantuml.elementProperties" : "true",
        "generatr.svglink.target" : "_self",
        "generatr.site.cdn" : "https://cdn.jsdelivr.net/npm",
        "generatr.site.theme" : "auto",
        "generatr.style.customStylesheet" : "site/custom.css",
        "generatr.style.colors.secondary" : "#ffffff",
        "generatr.site.exporter" : "structurizr",
        "generatr.style.colors.primary" : "#485fc7"
      },
      "styles" : {
        "elements" : [ {
          "color" : "#ffffff",
          "shape" : "Person",
          "tag" : "Person"
        } ]
      },
      "terminology" : { }
    }
  }
}